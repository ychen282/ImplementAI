# -*- coding: utf-8 -*-
"""CAE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YcrfQqj2leQ7a01nFRi__a68L2-NkHNl
"""

import csv
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

from google.colab import files
uploaded = files.upload()

data = pd.read_csv('./CAE_dataset.csv')

data.head

for i in range(0,9):
  print(str(i))

"""9th feauture for 10 samples labelled 0 and 1 resp."""

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['9'])

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i+400]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['9'])

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['0'])

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i+400]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['0'])

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['1'])

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i+400]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['1'])

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['2'])

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i+400]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['2'])

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['3'])

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i+400]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['3'])

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['4'])

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i+400]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['4'])

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['5'])

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i+400]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['5'])

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['6'])

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i+400]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['6'])

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['7'])

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i+400]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['7'])

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['8'])

data.columns=['t', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
       'label', 'Id']
for i in range(10):
    one = data.loc[data.Id == i+400]
    height,width =one.shape
    num = []
    for j in range(height):
        num.append(j)
    plt.plot(num, one['8'])

new = np.zeros((443, 1464, 13))
train_Y = [0]*443
for i in range(443):
  one = data.loc[data.Id == i]
  train_Y[i] = one.iloc[1,11]
  height,width = one.shape
  zpad = np.zeros((1464-height, 13))
  new[i] = np.concatenate((one,zpad))

len(train_Y)

new.shape

print(train_Y)
len(train_Y)

X_train = new[:,:,0:10]

test_X = X_train[247:297,:,:]
train_X1 = X_train[0:246,:,:]
train_X2 = X_train[298:,:,:]
train_X = np.concatenate((train_X1,train_X2), axis=0)
print(train_X.shape)
len(train_Y)
# test_X.shape

test_Y = train_Y[247:297]
train_Y1 = train_Y[0:246]
train_Y2 = train_Y[298:]
train_Y = np.concatenate((train_Y1,train_Y2), axis=0)
train_Y = to_categorical(train_Y)
test_Y = to_categorical(train_Y)
len(train_Y)
# len(test_Y)

np.transpose(train_X, (0, 1, 2)).shape
np.transpose(test_X, (0, 1, 2)).shape

from numpy import mean
from numpy import std
from numpy import dstack
from pandas import read_csv
from matplotlib import pyplot
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Flatten
from keras.layers import Dropout
from keras.layers.convolutional import Conv1D
from keras.layers.convolutional import MaxPooling1D
from keras.utils import to_categorical

def evaluate_model(trainX, trainy, testX, testy):
	verbose, epochs, batch_size = 0, 10, 16
	n_timesteps, n_features, n_outputs = trainX.shape[1], trainX.shape[2], train_Y[1]
	model = Sequential()
	model.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(n_timesteps,n_features)))
	model.add(Conv1D(filters=64, kernel_size=3, activation='relu'))
	model.add(Dropout(0.5))
	model.add(MaxPooling1D(pool_size=2))
	model.add(Flatten())
	model.add(Dense(100, activation='relu'))
	model.add(Dense(2, activation='softmax'))
	model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
	# fit network
	model.fit(trainX, trainy, epochs=epochs, batch_size=batch_size, verbose=verbose)
	# evaluate model
	_, accuracy = model.evaluate(testX, testy, batch_size=batch_size, verbose=0)
	return accuracy

def summarize_results(scores):
	print(scores)
	m, s = mean(scores), std(scores)
	print('Accuracy: %.3f%% (+/-%.3f)' % (m, s))

from keras.utils import to_categorical
train_Y = to_categorical(train_Y)
test_Y = to_categorical(test_Y)

# run an experiment
score = evaluate_model(train_X, train_Y, test_X, test_Y)
# def run_experiment():
#   repeats = 10
# 	# load data
# 	# repeat experiment
# 	scores = list()
# 	for r in range(repeats):
# 		score = evaluate_model(train_X, train_Y, test_X, test_Y)
# 		score = score * 100.0
# 		print('>#%d: %.3f' % (r+1, score))
# 		scores.append(score)
# 	# summarize results
# 	summarize_results(scores)
 
# run the experiment
# run_experiment()